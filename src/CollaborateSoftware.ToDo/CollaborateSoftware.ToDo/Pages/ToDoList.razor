@page "/todolist"

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="#">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">ToDo List</li>
    </ol>
</nav>

<h1>ToDo List</h1>

<p>This component demonstrates managing of a task list using a backend service.</p>

@if (Tasks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="border border-dark bg-light p-2 mb-5 d-flex justify-content-between">

        <button @onclick="AddToDoEntry" class="btn btn-primary quick-add-btn">
            <span class="material-icons">
                note_add
            </span>
        </button>

        <div class="d-flex w-25">

            @if (DisplayOnlyTodaysTasks)
            {
                <button type="button" class="btn btn-danger" title="Show all tasks" @onclick="eventArgs => { ShowTasksFromToday(); }">
                    <span class="material-icons">
                        list
                    </span>
                </button>
            }
            else
            {
                <button type="button" class="btn btn-danger" title="Show tasks due do today" @onclick="eventArgs => { ShowTasksFromToday(); }">
                    <span class="material-icons">
                        calendar_today
                    </span>
                </button>
            }

            <input id="search-term" class="form-control w-100 ml-2" value="@SearchTerm" placeholder="Search..." @onchange="eventArgs => { FilterList(eventArgs.Value.ToString()); }" />
        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th @onclick="@(() => SortByColum("Date"))">
                    @if (SortingColumn == "Date")
                    {
                        <span class="material-icons">
                            sort
                        </span>
                    }
                    <span>Date</span>
                </th>
                <th @onclick="@(() => SortByColum("Priority"))">
                    @if (SortingColumn == "Priority")
                    {
                        <span class="material-icons">
                            sort
                        </span>
                    }
                    <span>Priority</span>
                </th>
                <th @onclick="@(() => SortByColum("Title"))">
                    @if (SortingColumn == "Title")
                    {
                        <span class="material-icons">
                            sort
                        </span>
                    }
                    <span>Title</span>
                </th>
                <th @onclick="@(() => SortByColum("Done"))">
                    @if (SortingColumn == "Done")
                    {
                        <span class="material-icons">
                            sort
                        </span>
                    }
                    <span>Done</span>
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in Tasks)
            {
                <tr>
                    <td>@task.Date.ToShortDateString()</td>
                    <td>
                        @switch (task.Priority)
                        {
                            case Backend.Data.Priority.Low:
                                <span class="material-icons">
                                    low_priority
                                </span>
                                break;
                            case Backend.Data.Priority.Middle:
                                <span class="material-icons">
                                    list
                                </span>
                                break;
                            case Backend.Data.Priority.High:
                                <span class="material-icons">
                                    priority_high
                                </span>
                                break;
                        }

                    </td>
                    <td>@task.Title</td>
                    <td>
                        <div class="form-check form-switch">
                            @if (task.Done)
                            {
                                <input class="form-check-input" type="checkbox" id="doneCheckChecked" checked @onchange="eventArgs => { ToggleToDoDone(task.Id, eventArgs.Value); }">
                            }
                            else
                            {
                                <input class="form-check-input" type="checkbox" id="doneCheckChecked" @onchange="eventArgs => { ToggleToDoDone(task.Id, eventArgs.Value); }">
                            }
                        </div>
                    </td>
                    <td>
                        <div class="btn-group" role="group" aria-label="entry-actions">
                            <button type="button" class="btn btn-primary btn-sm" title="Edit this entry" @onclick="eventArgs => { EditToDoEntry(task.Id); }">
                                <span class="material-icons">
                                    edit_calendar
                                </span>
                            </button>

                            <button type="button" class="btn btn-danger btn-sm" title="Delete this entry" @onclick="eventArgs => { DeleteToDoEntry(task.Id); }">
                                <span class="material-icons">
                                    delete
                                </span>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="border border-dark p-2 bg-light">
        <button @onclick="AddToDoEntry" class="btn btn-primary quick-add-btn">
            <span class="material-icons">
                note_add
            </span>
        </button>
    </div>

    <CollaborateSoftware.MyLittleHelpers.Components.AddToDoEntryDialog @ref="@AddToDoEntryDialog" CloseEventCallback="@AddToDoEntryDialog_OnDialogClose"></CollaborateSoftware.MyLittleHelpers.Components.AddToDoEntryDialog>
    <CollaborateSoftware.MyLittleHelpers.Components.EditToDoEntryDialog @ref="@EditToDoEntryDialog" CloseEventCallback="@AddToDoEntryDialog_OnDialogClose"></CollaborateSoftware.MyLittleHelpers.Components.EditToDoEntryDialog>
}
